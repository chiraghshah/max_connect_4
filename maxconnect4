/**
 * 
 * @author Chirag Shah..
 *
 */
import java.util.*;
public class maxconnect4 {

	public static GameBoard currentGame; // declaring globally the current game so it can be used both for interactive and one-move
	public static AiPlayer calculon;
	public static int playColumn = 99;
	public static Scanner humanInputScanner = new Scanner(System.in);

	public static void main(String[] args) {
		if (args.length != 4) {
			System.out.println("Four command-line arguments are needed:\n"+ "Usage: java [program name] interactive [input_file] [computer-next / human-next] [depth]\n"+ " or:  java [program name] one-move [input_file] [output_file] [depth]\n");
			exit_function(0);
		}
		// parse the input arguments
		String game_mode = args[0].toString(); // the game mode
		String input_file = args[1].toString(); // the input game file
		String moveOrOutput = args[2].toString(); // decide whether human will move next or computer
		int depthLevel = Integer.parseInt(args[3]); // the depth level of the ai search

		// create and initialize the game board
		currentGame = new GameBoard(input_file);
		// create the Ai Player
		calculon = new AiPlayer(depthLevel);

		if(game_mode.equalsIgnoreCase("interactive"))// for interactive game mode..
		{
			interactive_function(moveOrOutput);
		}
		else if(game_mode.equalsIgnoreCase("one-move"))// for one-move game mode..
		{
			one_move_function(moveOrOutput);
		}
		else
		{
			System.out.println("\n" + game_mode + " is an unrecognized game mode \n try again. \n");
			return;
		}
			
		//switch string statement not supportive on omega.
		/*switch(game_mode.toLowerCase())
		{
		case "interactive": //interactive game mode..
			interactive_function(moveOrOutput);
			break;
		case "one-move": //one-move game mode..
			one_move_function(moveOrOutput);
			break;
		default:
			System.out.println("\n" + game_mode + " is an unrecognized game mode \n try again. \n");
			return;
		}*/
		
	} // PSVMain() ends here..

	private static void interactive_function(String next_move)
	{
		if (next_move.equalsIgnoreCase("computer-next")) {
			computer_turn_next();
		} else if (next_move.equalsIgnoreCase("human-next")) {
			human_turn_next();
		}
		if (!next_move.equalsIgnoreCase("computer-next") && !next_move.equalsIgnoreCase("human-next")) {
			System.out.println("Select a valid interactive mode \n");
			return;
		}
	}
	
	private static void one_move_function(String output)
	{
		///////////// one-move mode ///////////
		// get the output file name
		//String output = args[2].toString(); // the output game file
		System.out.print("\nMaxConnect-4 game\n");
		System.out.print("game state before move:\n");

		// print the current game board
		currentGame.printGameBoard();
		// print the current scores
		System.out.println("Score: Player 1 = " + currentGame.getScore(1) + ", Player2 = " + currentGame.getScore(2) + "\n ");

		// ****************** this chunk of code makes the computer play
		if (currentGame.getPieceCount() < 42) {
			int current_player = currentGame.getCurrentTurn();
			// AI play - random play
			playColumn = calculon.findBestPlay(currentGame);
			// play the piece
			currentGame.playPiece(playColumn);
			// display the current game board
			System.out.println("move " + currentGame.getPieceCount() + ": Player " + current_player + ", column " + playColumn);
			System.out.print("game state after move:\n");
			currentGame.printGameBoard();
			// print the current scores
			System.out.println("Score: Player 1 = " + currentGame.getScore(1) + ", Player2 = " + currentGame.getScore(2) + "\n ");
			currentGame.printGameBoardToFile(output);
		} else {
			System.out.println("\nI can't play.\nThe Board is Full\n\nGame Over");
		}
		// ************************** end computer play
		return;	
	}
	
	

	private static void computer_turn_next() {
		currentGame.printGameBoard();// printing current board and score..
		System.out.println("Score: Player 1 = " + currentGame.getScore(1) + ", Player 2 = " + currentGame.getScore(2) + "\n ");
		if (currentGame.getPieceCount() >= 42) {
			exit_function(0);
		} 
		else {
			System.out.println("Computer's Turn->");
			playColumn = calculon.findBestPlay(currentGame);
			//System.out.println("Computer Played Column : "+playColumn + 1);
			currentGame.playPiece(playColumn);
			currentGame.printGameBoardToFile("computer.txt");
			human_turn_next();//giving back the turn to human..
		}
	}
	
	private static void human_turn_next() {
		currentGame.printGameBoard();// printing current board..
		System.out.println("Score: Player 1 = " + currentGame.getScore(1) + ", Player 2 = " + currentGame.getScore(2) + "\n ");
		int human_ip = 0;
		if (currentGame.getPieceCount() >= 42) {
			exit_function(0);
		}
		else {
			System.out.println("Human's Turn->  Please make a  move from Column's 1 to 7 :");
			//taking input from human user unless it's a valid one..
			do 
			{
				human_ip = humanInputScanner.nextInt();
			} while (!currentGame.isValidPlay(human_ip - 1));

			currentGame.playPiece(human_ip - 1);
			currentGame.printGameBoardToFile("human.txt");
			computer_turn_next();//giving back the turn to computer..
		}
	}

	/**
	 * This method is used when to exit the program prematurely.
	 * 
	 * @param value
	 *            an integer that is returned to the system when the program
	 *            exits.
	 */
	private static void exit_function(int value) {
		System.out.println("exiting from MaxConnectFour.java!\n\n");
		System.exit(value);
	}
} // end of class connectFour
